<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="342.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="325" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="325" > </text>
<g id="frames">
<g >
<title>&lt;built-in_method_argsort_of_Tensor_object_at_0x7f0000146720&gt; (278 samples, 4.05%)</title><rect x="580.6" y="85" width="47.8" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="583.57" y="95.5" >&lt;bui..</text>
</g>
<g >
<title>torch/nn/modules/activation.py(100):_forward (18 samples, 0.26%)</title><rect x="1185.2" y="117" width="3.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1188.19" y="127.5" ></text>
</g>
<g >
<title>&lt;built-in_method_nonzero_of_type_object_at_0x7f010fdbc840&gt; (66 samples, 0.96%)</title><rect x="169.6" y="101" width="11.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="172.58" y="111.5" ></text>
</g>
<g >
<title>torch/_jit_internal.py(489):_fn (422 samples, 6.15%)</title><rect x="244.6" y="69" width="72.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="247.56" y="79.5" >torch/_j..</text>
</g>
<g >
<title>&lt;built-in_method_hash_query_cuda_of_PyCapsule_object_at_0x7f00581e9e40&gt; (136 samples, 1.98%)</title><rect x="341.0" y="85" width="23.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="344.03" y="95.5" >&lt;..</text>
</g>
<g >
<title>&lt;built-in_method_cat_of_type_object_at_0x7f010fdbc840&gt; (8 samples, 0.12%)</title><rect x="628.4" y="85" width="1.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="631.37" y="95.5" ></text>
</g>
<g >
<title>torchsparse/nn/functional/hash.py(10):_sphash (109 samples, 1.59%)</title><rect x="317.1" y="101" width="18.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="320.12" y="111.5" ></text>
</g>
<g >
<title>&lt;built-in_method_int_of_Tensor_object_at_0x7f0000146630&gt; (8 samples, 0.12%)</title><rect x="519.2" y="53" width="1.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="522.18" y="63.5" ></text>
</g>
<g >
<title>torch/_tensor.py(34):_wrapped (10 samples, 0.15%)</title><rect x="189.5" y="101" width="1.7" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="192.53" y="111.5" ></text>
</g>
<g >
<title>torch/_jit_internal.py(489):_fn (434 samples, 6.32%)</title><rect x="633.2" y="69" width="74.6" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="636.19" y="79.5" >torch/_j..</text>
</g>
<g >
<title>&lt;built-in_method_hash_query_cuda_of_PyCapsule_object_at_0x7f00581e9e40&gt; (127 samples, 1.85%)</title><rect x="1027.5" y="85" width="21.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1030.50" y="95.5" >&lt;..</text>
</g>
<g >
<title>torchsparse/nn/functional/build_kmap.py(14):_unique (756 samples, 11.02%)</title><rect x="577.8" y="101" width="130.0" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="580.82" y="111.5" >torchsparse/nn/f..</text>
</g>
<g >
<title>&lt;built-in_method_arange_of_type_object_at_0x7f010fdbc840&gt; (6 samples, 0.09%)</title><rect x="340.0" y="85" width="1.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="342.99" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_int_of_Tensor_object_at_0x7f0000146630&gt; (16 samples, 0.23%)</title><rect x="554.1" y="101" width="2.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="557.09" y="111.5" ></text>
</g>
<g >
<title>torch/nn/modules/module.py(1513):__call_impl (10 samples, 0.15%)</title><rect x="1188.3" y="165" width="1.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1191.28" y="175.5" ></text>
</g>
<g >
<title>torchsparse/nn/utils/apply.py(10):_fapply (10 samples, 0.15%)</title><rect x="1188.3" y="133" width="1.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.28" y="143.5" ></text>
</g>
<g >
<title>torch/_tensor.py(34):_wrapped (10 samples, 0.15%)</title><rect x="576.1" y="101" width="1.7" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="579.10" y="111.5" ></text>
</g>
<g >
<title>&lt;built-in_method_build_mask_from_kmap_of_PyCapsule_object_at_0x7f00581e9f60&gt; (59 samples, 0.86%)</title><rect x="972.3" y="101" width="10.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="975.30" y="111.5" ></text>
</g>
<g >
<title>torchsparse/nn/utils/apply.py(10):_fapply (12 samples, 0.17%)</title><rect x="1183.1" y="133" width="2.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1186.12" y="143.5" ></text>
</g>
<g >
<title>&lt;built-in_method_relu__of_type_object_at_0x7f010fdbc840&gt; (10 samples, 0.15%)</title><rect x="1188.3" y="85" width="1.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1191.28" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_cpu_of_Tensor_object_at_0x7f00001464a0&gt; (2 samples, 0.03%)</title><rect x="751.5" y="117" width="0.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="754.50" y="127.5" ></text>
</g>
<g >
<title>&lt;built-in_method_kernel_hash_cuda_of_PyCapsule_object_at_0x7f00581e9de0&gt; (76 samples, 1.11%)</title><rect x="1009.6" y="85" width="13.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1012.61" y="95.5" ></text>
</g>
<g >
<title>torchsparse/nn/utils/kernel.py(11):_get_kernel_offsets (2 samples, 0.03%)</title><rect x="364.4" y="101" width="0.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="367.41" y="111.5" ></text>
</g>
<g >
<title>torchsparse/nn/functional/conv.py(20):_forward (594 samples, 8.66%)</title><rect x="856.1" y="69" width="102.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="859.05" y="79.5" >torchsparse/..</text>
</g>
<g >
<title>nn.Module:_Conv3d_0 (2,063 samples, 30.06%)</title><rect x="10.0" y="181" width="354.8" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >nn.Module:_Conv3d_0</text>
</g>
<g >
<title>&lt;built-in_method_relu__of_type_object_at_0x7f010fdbc840&gt; (12 samples, 0.17%)</title><rect x="1183.1" y="85" width="2.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1186.12" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_cpu_of_Tensor_object_at_0x7f00001464a0&gt; (2 samples, 0.03%)</title><rect x="364.8" y="117" width="0.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="367.76" y="127.5" ></text>
</g>
<g >
<title>torch/nn/modules/module.py(1513):__call_impl (18 samples, 0.26%)</title><rect x="1185.2" y="165" width="3.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1188.19" y="175.5" ></text>
</g>
<g >
<title>&lt;built-in_method_build_mask_from_kmap_of_PyCapsule_object_at_0x7f00581e9f60&gt; (72 samples, 1.05%)</title><rect x="147.6" y="101" width="12.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="150.57" y="111.5" ></text>
</g>
<g >
<title>&lt;built-in_method_apply_of_FunctionMeta_object_at_0x70e7750&gt; (904 samples, 13.17%)</title><rect x="365.1" y="101" width="155.5" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="368.10" y="111.5" >&lt;built-in_method_ap..</text>
</g>
<g >
<title>&lt;built-in_method_nonzero_of_type_object_at_0x7f010fdbc840&gt; (64 samples, 0.93%)</title><rect x="556.8" y="101" width="11.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="559.84" y="111.5" ></text>
</g>
<g >
<title>torchsparse/nn/modules/activation.py(11):_forward (10 samples, 0.15%)</title><rect x="1188.3" y="149" width="1.7" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1191.28" y="159.5" ></text>
</g>
<g >
<title>torch/nn/modules/module.py(1513):__call_impl (12 samples, 0.17%)</title><rect x="1183.1" y="165" width="2.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1186.12" y="175.5" ></text>
</g>
<g >
<title>torchsparse/nn/functional/query.py(8):_sphashquery (155 samples, 2.26%)</title><rect x="1022.7" y="101" width="26.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1025.68" y="111.5" >t..</text>
</g>
<g >
<title>&lt;built-in_method_apply_of_FunctionMeta_object_at_0x70e7750&gt; (1,200 samples, 17.49%)</title><rect x="751.8" y="101" width="206.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="754.84" y="111.5" >&lt;built-in_method_apply_of_F..</text>
</g>
<g >
<title>&lt;built-in_method_sum_of_type_object_at_0x7f010fdbc840&gt; (46 samples, 0.67%)</title><rect x="1000.0" y="101" width="7.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1002.98" y="111.5" ></text>
</g>
<g >
<title>&lt;built-in_method_apply_of_FunctionMeta_object_at_0x70e7750&gt; (776 samples, 11.31%)</title><rect x="1049.7" y="101" width="133.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1052.68" y="111.5" >&lt;built-in_method..</text>
</g>
<g >
<title>nn.Module:_Sequential_0 (6,862 samples, 100.00%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >nn.Module:_Sequential_0</text>
</g>
<g >
<title>torchsparse/nn/modules/conv.py(94):_forward (2,063 samples, 30.06%)</title><rect x="10.0" y="149" width="354.8" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >torchsparse/nn/modules/conv.py(94):_forward</text>
</g>
<g >
<title>&lt;built-in_method_convolution_forward_cuda_of_PyCapsule_object_at_0x7f00581e9ab0&gt; (348 samples, 5.07%)</title><rect x="1120.9" y="53" width="59.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1123.87" y="63.5" >&lt;built..</text>
</g>
<g >
<title>&lt;built-in_method_tensor_of_type_object_at_0x7f010fdbc840&gt; (2 samples, 0.03%)</title><rect x="1049.3" y="85" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1052.34" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_concat_of_type_object_at_0x7f010fdbc840&gt; (24 samples, 0.35%)</title><rect x="548.2" y="101" width="4.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="551.24" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_ReLU_0 (12 samples, 0.17%)</title><rect x="1183.1" y="181" width="2.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1186.12" y="191.5" ></text>
</g>
<g >
<title>torchsparse/nn/modules/conv.py(94):_forward (2,249 samples, 32.77%)</title><rect x="364.8" y="149" width="386.7" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="367.76" y="159.5" >torchsparse/nn/modules/conv.py(94):_forward</text>
</g>
<g >
<title>torch/functional.py(755):__unique_impl (434 samples, 6.32%)</title><rect x="633.2" y="53" width="74.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="636.19" y="63.5" >torch/fu..</text>
</g>
<g >
<title>torchsparse/nn/modules/activation.py(11):_forward (18 samples, 0.26%)</title><rect x="1185.2" y="149" width="3.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1188.19" y="159.5" ></text>
</g>
<g >
<title>torchsparse/nn/functional/conv.py(140):_conv3d (776 samples, 11.31%)</title><rect x="1049.7" y="133" width="133.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1052.68" y="143.5" >torchsparse/nn/f..</text>
</g>
<g >
<title>torch/autograd/function.py(537):_apply (904 samples, 13.17%)</title><rect x="365.1" y="117" width="155.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="368.10" y="127.5" >torch/autograd/func..</text>
</g>
<g >
<title>&lt;built-in_method_sum_of_type_object_at_0x7f010fdbc840&gt; (46 samples, 0.67%)</title><rect x="567.8" y="101" width="8.0" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="570.84" y="111.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1462):_relu (12 samples, 0.17%)</title><rect x="1183.1" y="101" width="2.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1186.12" y="111.5" ></text>
</g>
<g >
<title>&lt;built-in_method_int_of_Tensor_object_at_0x7f0000146630&gt; (14 samples, 0.20%)</title><rect x="167.2" y="101" width="2.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="170.17" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/function.py(537):_apply (776 samples, 11.31%)</title><rect x="1049.7" y="117" width="133.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1052.68" y="127.5" >torch/autograd/f..</text>
</g>
<g >
<title>&lt;built-in_method_concat_of_type_object_at_0x7f010fdbc840&gt; (24 samples, 0.35%)</title><rect x="161.3" y="101" width="4.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="164.33" y="111.5" ></text>
</g>
<g >
<title>torchsparse/nn/functional/query.py(8):_sphashquery (166 samples, 2.42%)</title><rect x="335.9" y="101" width="28.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="338.87" y="111.5" >to..</text>
</g>
<g >
<title>nn.Module:_ReLU_1 (18 samples, 0.26%)</title><rect x="1185.2" y="181" width="3.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1188.19" y="191.5" ></text>
</g>
<g >
<title>&lt;built-in_method_tensor_of_type_object_at_0x7f010fdbc840&gt; (2 samples, 0.03%)</title><rect x="751.2" y="85" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="754.15" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_sum_of_type_object_at_0x7f010fdbc840&gt; (48 samples, 0.70%)</title><rect x="180.9" y="101" width="8.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="183.93" y="111.5" ></text>
</g>
<g >
<title>torchsparse/nn/functional/query.py(8):_sphashquery (155 samples, 2.26%)</title><rect x="724.5" y="101" width="26.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="727.50" y="111.5" >t..</text>
</g>
<g >
<title>&lt;built-in_method_new_zeros_of_Tensor_object_at_0x7f00001466d0&gt; (4 samples, 0.06%)</title><rect x="632.5" y="85" width="0.7" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="635.50" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_int_of_Tensor_object_at_0x7f0000146630&gt; (14 samples, 0.20%)</title><rect x="1180.7" y="53" width="2.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1183.71" y="63.5" ></text>
</g>
<g >
<title>&lt;built-in_method_int_of_Tensor_object_at_0x7f0000146630&gt; (8 samples, 0.12%)</title><rect x="131.1" y="53" width="1.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="134.06" y="63.5" ></text>
</g>
<g >
<title>torch/nn/modules/module.py(1513):__call_impl (2,249 samples, 32.77%)</title><rect x="364.8" y="165" width="386.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="367.76" y="175.5" >torch/nn/modules/module.py(1513):__call_impl</text>
</g>
<g >
<title>torchsparse/nn/modules/activation.py(11):_forward (12 samples, 0.17%)</title><rect x="1183.1" y="149" width="2.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1186.12" y="159.5" ></text>
</g>
<g >
<title>&lt;built-in_method_kernel_hash_cuda_of_PyCapsule_object_at_0x7f00581e9de0&gt; (77 samples, 1.12%)</title><rect x="711.3" y="85" width="13.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="714.26" y="95.5" ></text>
</g>
<g >
<title>torch/functional.py(755):__unique_impl (422 samples, 6.15%)</title><rect x="244.6" y="53" width="72.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="247.56" y="63.5" >torch/fu..</text>
</g>
<g >
<title>&lt;built-in_method_int_of_Tensor_object_at_0x7f0000146630&gt; (12 samples, 0.17%)</title><rect x="956.1" y="53" width="2.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="959.13" y="63.5" ></text>
</g>
<g >
<title>torch/cuda/amp/autocast_mode.py(110):_decorate_fwd (320 samples, 4.66%)</title><rect x="77.4" y="85" width="55.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="80.41" y="95.5" >torch..</text>
</g>
<g >
<title>all (6,862 samples, 100%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>&lt;built-in_method_unique_dim_of_type_object_at_0x7f010fdbc840&gt; (422 samples, 6.15%)</title><rect x="244.6" y="37" width="72.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="247.56" y="47.5" >&lt;built-i..</text>
</g>
<g >
<title>&lt;built-in_method_arange_of_type_object_at_0x7f010fdbc840&gt; (6 samples, 0.09%)</title><rect x="1026.5" y="85" width="1.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1029.46" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_contiguous_of_Tensor_object_at_0x7f0000146770&gt; (10 samples, 0.15%)</title><rect x="165.5" y="101" width="1.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="168.45" y="111.5" ></text>
</g>
<g >
<title>&lt;built-in_method_int_of_Tensor_object_at_0x7f0000146630&gt; (18 samples, 0.26%)</title><rect x="984.8" y="101" width="3.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="987.85" y="111.5" ></text>
</g>
<g >
<title>torchsparse/nn/modules/conv.py(94):_forward (776 samples, 11.31%)</title><rect x="1049.7" y="149" width="133.4" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1052.68" y="159.5" >torchsparse/nn/m..</text>
</g>
<g >
<title>&lt;built-in_method_convolution_forward_cuda_of_PyCapsule_object_at_0x7f00581e9ab0&gt; (418 samples, 6.09%)</title><rect x="447.3" y="53" width="71.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="450.30" y="63.5" >&lt;built-i..</text>
</g>
<g >
<title>torch/nn/modules/module.py(1513):__call_impl (1,734 samples, 25.27%)</title><rect x="751.5" y="165" width="298.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="754.50" y="175.5" >torch/nn/modules/module.py(1513):__call_..</text>
</g>
<g >
<title>torch/nn/modules/container.py(215):_forward (6,862 samples, 100.00%)</title><rect x="10.0" y="197" width="1180.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >torch/nn/modules/container.py(215):_forward</text>
</g>
<g >
<title>&lt;built-in_method_arange_of_type_object_at_0x7f010fdbc840&gt; (6 samples, 0.09%)</title><rect x="728.3" y="85" width="1.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="731.28" y="95.5" ></text>
</g>
<g >
<title>torchsparse/nn/functional/hash.py(10):_sphash (86 samples, 1.25%)</title><rect x="1007.9" y="101" width="14.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1010.89" y="111.5" ></text>
</g>
<g >
<title>&lt;built-in_method_cpu_of_Tensor_object_at_0x7f00001464a0&gt; (2 samples, 0.03%)</title><rect x="10.0" y="117" width="0.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>&lt;built-in_method_cumsum_of_Tensor_object_at_0x7f00001466d0&gt; (16 samples, 0.23%)</title><rect x="241.1" y="85" width="2.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="244.12" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_hash_cuda_of_PyCapsule_object_at_0x7f00581e9d80&gt; (20 samples, 0.29%)</title><rect x="317.1" y="85" width="3.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="320.12" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_tensor_of_type_object_at_0x7f010fdbc840&gt; (2 samples, 0.03%)</title><rect x="364.4" y="85" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="367.41" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_nonzero_of_type_object_at_0x7f010fdbc840&gt; (70 samples, 1.02%)</title><rect x="987.9" y="101" width="12.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="990.95" y="111.5" ></text>
</g>
<g >
<title>torch/cuda/amp/autocast_mode.py(110):_decorate_fwd (426 samples, 6.21%)</title><rect x="447.3" y="85" width="73.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="450.30" y="95.5" >torch/cu..</text>
</g>
<g >
<title>nn.Module:_Conv3d_1 (2,249 samples, 32.77%)</title><rect x="364.8" y="181" width="386.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="367.76" y="191.5" >nn.Module:_Conv3d_1</text>
</g>
<g >
<title>&lt;built-in_method_contiguous_of_Tensor_object_at_0x7f0000146770&gt; (10 samples, 0.15%)</title><rect x="552.4" y="101" width="1.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="555.37" y="111.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1462):_relu (18 samples, 0.26%)</title><rect x="1185.2" y="101" width="3.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1188.19" y="111.5" ></text>
</g>
<g >
<title>torchsparse/nn/functional/build_kmap.py(14):_unique (732 samples, 10.67%)</title><rect x="191.2" y="101" width="125.9" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="194.25" y="111.5" >torchsparse/nn/..</text>
</g>
<g >
<title>&lt;built-in_method_tensor_of_type_object_at_0x7f010fdbc840&gt; (2 samples, 0.03%)</title><rect x="575.8" y="101" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="578.75" y="111.5" ></text>
</g>
<g >
<title>torchsparse/nn/functional/conv.py(140):_conv3d (2,063 samples, 30.06%)</title><rect x="10.0" y="133" width="354.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="13.00" y="143.5" >torchsparse/nn/functional/conv.py(140):_conv3d</text>
</g>
<g >
<title>torchsparse/nn/utils/apply.py(10):_fapply (18 samples, 0.26%)</title><rect x="1185.2" y="133" width="3.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1188.19" y="143.5" ></text>
</g>
<g >
<title>torch/nn/modules/activation.py(100):_forward (10 samples, 0.15%)</title><rect x="1188.3" y="117" width="1.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1191.28" y="127.5" ></text>
</g>
<g >
<title>&lt;built-in_method_argsort_of_Tensor_object_at_0x7f0000146720&gt; (266 samples, 3.88%)</title><rect x="194.0" y="85" width="45.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="197.00" y="95.5" >&lt;bui..</text>
</g>
<g >
<title>&lt;built-in_method_unique_dim_of_type_object_at_0x7f010fdbc840&gt; (434 samples, 6.32%)</title><rect x="633.2" y="37" width="74.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="636.19" y="47.5" >&lt;built-i..</text>
</g>
<g >
<title>nn.Module:_Conv3d_3 (776 samples, 11.31%)</title><rect x="1049.7" y="181" width="133.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1052.68" y="191.5" >nn.Module:_Conv3..</text>
</g>
<g >
<title>torchsparse/nn/functional/conv.py(20):_forward (320 samples, 4.66%)</title><rect x="77.4" y="69" width="55.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="80.41" y="79.5" >torch..</text>
</g>
<g >
<title>torch/_jit_internal.py(489):_fn (422 samples, 6.15%)</title><rect x="244.6" y="85" width="72.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="247.56" y="95.5" >torch/_j..</text>
</g>
<g >
<title>torch/nn/modules/module.py(1513):__call_impl (2,063 samples, 30.06%)</title><rect x="10.0" y="165" width="354.8" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >torch/nn/modules/module.py(1513):__call_impl</text>
</g>
<g >
<title>torchsparse/nn/functional/conv.py(20):_forward (426 samples, 6.21%)</title><rect x="447.3" y="69" width="73.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="450.30" y="79.5" >torchspa..</text>
</g>
<g >
<title>&lt;built-in_method_new_zeros_of_Tensor_object_at_0x7f00001466d0&gt; (4 samples, 0.06%)</title><rect x="243.9" y="85" width="0.7" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="246.87" y="95.5" ></text>
</g>
<g >
<title>torch/nn/modules/module.py(1513):__call_impl (776 samples, 11.31%)</title><rect x="1049.7" y="165" width="133.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1052.68" y="175.5" >torch/nn/modules..</text>
</g>
<g >
<title>torchsparse/nn/functional/build_kmap.py(23):_build_kernel_map (532 samples, 7.75%)</title><rect x="958.2" y="117" width="91.5" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="961.20" y="127.5" >torchspars..</text>
</g>
<g >
<title>run_simplenet_inference2.py(323):_&lt;module&gt; (6,862 samples, 100.00%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >run_simplenet_inference2.py(323):_&lt;module&gt;</text>
</g>
<g >
<title>torchsparse/nn/utils/kernel.py(11):_get_kernel_offsets (2 samples, 0.03%)</title><rect x="751.2" y="101" width="0.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="754.15" y="111.5" ></text>
</g>
<g >
<title>torchsparse/nn/utils/kernel.py(11):_get_kernel_offsets (2 samples, 0.03%)</title><rect x="1049.3" y="101" width="0.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1052.34" y="111.5" ></text>
</g>
<g >
<title>torch/cuda/amp/autocast_mode.py(110):_decorate_fwd (594 samples, 8.66%)</title><rect x="856.1" y="85" width="102.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="859.05" y="95.5" >torch/cuda/a..</text>
</g>
<g >
<title>torch/autograd/function.py(537):_apply (710 samples, 10.35%)</title><rect x="10.3" y="117" width="122.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="13.34" y="127.5" >torch/autograd/..</text>
</g>
<g >
<title>torch/nn/functional.py(1462):_relu (10 samples, 0.15%)</title><rect x="1188.3" y="101" width="1.7" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1191.28" y="111.5" ></text>
</g>
<g >
<title>torchsparse/nn/functional/conv.py(140):_conv3d (2,249 samples, 32.77%)</title><rect x="364.8" y="133" width="386.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="367.76" y="143.5" >torchsparse/nn/functional/conv.py(140):_conv3d</text>
</g>
<g >
<title>&lt;built-in_method_tensor_of_type_object_at_0x7f010fdbc840&gt; (2 samples, 0.03%)</title><rect x="189.2" y="101" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="192.18" y="111.5" ></text>
</g>
<g >
<title>&lt;built-in_method_cumsum_of_Tensor_object_at_0x7f00001466d0&gt; (16 samples, 0.23%)</title><rect x="629.7" y="85" width="2.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="632.75" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_floor_divide_of_type_object_at_0x7f010fdbc840&gt; (10 samples, 0.15%)</title><rect x="189.5" y="69" width="1.7" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="192.53" y="79.5" ></text>
</g>
<g >
<title>torch/_tensor.py(972):___floordiv__ (10 samples, 0.15%)</title><rect x="189.5" y="85" width="1.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="192.53" y="95.5" ></text>
</g>
<g >
<title>torchsparse/nn/modules/conv.py(94):_forward (1,734 samples, 25.27%)</title><rect x="751.5" y="149" width="298.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="754.50" y="159.5" >torchsparse/nn/modules/conv.py(94):_forw..</text>
</g>
<g >
<title>torchsparse/nn/functional/hash.py(10):_sphash (97 samples, 1.41%)</title><rect x="707.8" y="101" width="16.7" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="710.82" y="111.5" ></text>
</g>
<g >
<title>torch/cuda/amp/autocast_mode.py(110):_decorate_fwd (362 samples, 5.28%)</title><rect x="1120.9" y="85" width="62.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1123.87" y="95.5" >torch/..</text>
</g>
<g >
<title>run_simplenet_inference2.py(40):_cuda_pytorch_profiling (6,862 samples, 100.00%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >run_simplenet_inference2.py(40):_cuda_pytorch_profiling</text>
</g>
<g >
<title>&lt;built-in_method_build_mask_from_kmap_of_PyCapsule_object_at_0x7f00581e9f60&gt; (67 samples, 0.98%)</title><rect x="535.3" y="101" width="11.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="538.34" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Conv3d_2 (1,734 samples, 25.27%)</title><rect x="751.5" y="181" width="298.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="754.50" y="191.5" >nn.Module:_Conv3d_2</text>
</g>
<g >
<title>&lt;built-in_method_convolution_forward_cuda_of_PyCapsule_object_at_0x7f00581e9ab0&gt; (582 samples, 8.48%)</title><rect x="856.1" y="53" width="100.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="859.05" y="63.5" >&lt;built-in_me..</text>
</g>
<g >
<title>torchsparse/nn/functional/conv.py(140):_conv3d (1,734 samples, 25.27%)</title><rect x="751.5" y="133" width="298.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="754.50" y="143.5" >torchsparse/nn/functional/conv.py(140):_..</text>
</g>
<g >
<title>&lt;built-in_method_kernel_hash_cuda_of_PyCapsule_object_at_0x7f00581e9de0&gt; (89 samples, 1.30%)</title><rect x="320.6" y="85" width="15.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="323.56" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_hash_query_cuda_of_PyCapsule_object_at_0x7f00581e9e40&gt; (127 samples, 1.85%)</title><rect x="729.3" y="85" width="21.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="732.32" y="95.5" >&lt;..</text>
</g>
<g >
<title>torch/_tensor.py(972):___floordiv__ (10 samples, 0.15%)</title><rect x="576.1" y="85" width="1.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="579.10" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_hash_cuda_of_PyCapsule_object_at_0x7f00581e9d80&gt; (10 samples, 0.15%)</title><rect x="1007.9" y="85" width="1.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1010.89" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/function.py(537):_apply (1,200 samples, 17.49%)</title><rect x="751.8" y="117" width="206.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="754.84" y="127.5" >torch/autograd/function.py(..</text>
</g>
<g >
<title>&lt;built-in_method_contiguous_of_Tensor_object_at_0x7f0000146770&gt; (14 samples, 0.20%)</title><rect x="982.4" y="101" width="2.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="985.44" y="111.5" ></text>
</g>
<g >
<title>&lt;built-in_method_floor_divide_of_type_object_at_0x7f010fdbc840&gt; (10 samples, 0.15%)</title><rect x="576.1" y="69" width="1.7" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="579.10" y="79.5" ></text>
</g>
<g >
<title>torchsparse/nn/functional/conv.py(20):_forward (362 samples, 5.28%)</title><rect x="1120.9" y="69" width="62.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1123.87" y="79.5" >torchs..</text>
</g>
<g >
<title>torch/_jit_internal.py(489):_fn (434 samples, 6.32%)</title><rect x="633.2" y="85" width="74.6" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="636.19" y="95.5" >torch/_j..</text>
</g>
<g >
<title>torchsparse/nn/functional/build_kmap.py(23):_build_kernel_map (1,343 samples, 19.57%)</title><rect x="520.6" y="117" width="230.9" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="523.55" y="127.5" >torchsparse/nn/functional/buil..</text>
</g>
<g >
<title>nn.Module:_ReLU_2 (10 samples, 0.15%)</title><rect x="1188.3" y="181" width="1.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1191.28" y="191.5" ></text>
</g>
<g >
<title>&lt;built-in_method_convolution_forward_cuda_of_PyCapsule_object_at_0x7f00581e9ab0&gt; (312 samples, 4.55%)</title><rect x="77.4" y="53" width="53.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="80.41" y="63.5" >&lt;buil..</text>
</g>
<g >
<title>torchsparse/nn/functional/build_kmap.py(23):_build_kernel_map (1,351 samples, 19.69%)</title><rect x="132.4" y="117" width="232.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="135.44" y="127.5" >torchsparse/nn/functional/buil..</text>
</g>
<g >
<title>&lt;built-in_method_clone_of_Tensor_object_at_0x7f0000146770&gt; (8 samples, 0.12%)</title><rect x="546.9" y="101" width="1.3" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="549.86" y="111.5" ></text>
</g>
<g >
<title>run_simplenet_inference2.py(299):_main (6,862 samples, 100.00%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >run_simplenet_inference2.py(299):_main</text>
</g>
<g >
<title>&lt;built-in_method_apply_of_FunctionMeta_object_at_0x70e7750&gt; (710 samples, 10.35%)</title><rect x="10.3" y="101" width="122.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="13.34" y="111.5" >&lt;built-in_metho..</text>
</g>
<g >
<title>&lt;built-in_method_hash_cuda_of_PyCapsule_object_at_0x7f00581e9d80&gt; (20 samples, 0.29%)</title><rect x="707.8" y="85" width="3.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="710.82" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_relu__of_type_object_at_0x7f010fdbc840&gt; (18 samples, 0.26%)</title><rect x="1185.2" y="85" width="3.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1188.19" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_clone_of_Tensor_object_at_0x7f0000146770&gt; (8 samples, 0.12%)</title><rect x="160.0" y="101" width="1.3" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="162.95" y="111.5" ></text>
</g>
<g >
<title>torch/nn/modules/module.py(1513):__call_impl (6,862 samples, 100.00%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >torch/nn/modules/module.py(1513):__call_impl</text>
</g>
<g >
<title>&lt;built-in_method_cat_of_type_object_at_0x7f010fdbc840&gt; (8 samples, 0.12%)</title><rect x="239.7" y="85" width="1.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="242.74" y="95.5" ></text>
</g>
<g >
<title>torch/nn/modules/activation.py(100):_forward (12 samples, 0.17%)</title><rect x="1183.1" y="117" width="2.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1186.12" y="127.5" ></text>
</g>
</g>
</svg>
